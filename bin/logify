#!/usr/bin/env python3

"""
logify - Simple parser for Couchbase Operator 2.0.0 JSON logs

Parses and renders JSON logs in a human readable format.
"""

import argparse
import json
import os
import sys
import tempfile
import time
import webbrowser

import jinja2

# These are the keys that are required/expected by each log entry.
REQUIRED_KEYS = [
    u'level',
    u'ts',
    u'msg',
]

def main(args):
    """
    Main entry point
    """

    parser = argparse.ArgumentParser()
    parser.add_argument('logfile')
    args = parser.parse_args()

    # Read in the file, discarding whitespace and splitting into lines.
    with open(args.logfile) as filedesc:
        log = filedesc.read().strip().split('\n')

    # Parse each line into raw JSON
    log = [json.loads(x) for x in log if x.startswith('{')]

    def convert(entry):
        """
        Takes a raw object and converts it into our internal representation.
        """

        # Extract custom labels, doing any conversion on the way.
        labels = {k: entry[k] for k in entry if k not in REQUIRED_KEYS}

        # Convert from a cluster object to a string so it's easier to handle in angular.
        if 'cluster' in labels and isinstance(labels['cluster'], dict):
            labels['cluster'] = labels['cluster']['namespace'] + '/' + labels['cluster']['name']

        # Bump up the level of entries with errors in them.
        if 'error' in labels:
            entry['level'] = 'error'

        return {
            u'level': entry['level'],
            u'timestamp': time.ctime(entry['ts']),
            u'message': entry['msg'],
            u'labels': labels,
        }

    log = [convert(x) for x in log]

    # Load up the resources to be rendered into a static HTML page.
    base = os.path.dirname(os.path.realpath(__file__))
    with open(base + '/../css/default.css') as tmp:
        css = tmp.read()
    with open(base + '/../templates/index.html') as tmp:
        template = jinja2.Template(tmp.read())

    # Create a temporary file and render the content out to it.
    filedesc, path = tempfile.mkstemp()
    os.write(filedesc, template.render(css=css, entries=json.dumps(log)).encode('utf-8'))
    os.close(filedesc)

    # Finally... magic!
    webbrowser.open_new_tab('file://' + path)


if __name__ == '__main__':
    main(sys.argv[1:])

# vi: ts=4 et:
